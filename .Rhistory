#Allow the user to retrieve the Inverted Matrix
getInverse <- function() {
m
}
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Put comments here that give an overall description of what your
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## Clear the result inverted matrix
m <- NULL
## Store the matrix passed by the user if it is a square matrix
## If the Matrix is not square, return an error
setMatrix <- function(y) {
nrows <- nrow(y)
ncols <- ncol(y)
if (nrows == ncols) {
x <<- y
m <<- NULL
}
else {
stop("Matrix is not Square")
}
}
## Allow the user to Retrive the matrix they passed into the function
getMatrix <- function() {
x
}
## Assign the inverted matrix into the variable
## Note, this function is not called by the user; it is called by cacheSolve
setInverse <- function(inverse) {
m <<- inverse
}
## Allow the user to retrieve the Inverted Matrix
getInverse <- function() {
m
}
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
#If no input matrix exists, stop execution
userMatrix <- x$getMatrix()
if(is.null(userMatrix)) {
stop("Input Matrix is empty")
}
#Retrieve the value of the Inverted Matrix
#If the matrix is null then the inverted matrix has not been computed
#If it is not null the inverted matrix has been computed and should be
#returned without recomputing
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached data")
return(m)
}
#This code is executed when the inverted matrix has not been computed
#Compute the inverted matrix with the solve function
data <- x$getMatrix()
m <- solve(data)
x$setInverse(m)
message("Creating Cache")
m
}
## The following functions allows a user to setup a variable (makeCacheMatrix) that
## incorporates both functions and data. Other R objects may interact with this variable
## and its data by calling the exposed functions.  The second function (cacheSolve) uses
## this variable as a cache for an inverted matrix. If the inverted matrix has not
## been populated it is calculated.  Once populated, it pulls from the stored version
## rather than perfomring the calculation again.
## The makeCacheMatrix function setup the variables and builds functions to allow the
## user/other funcitons to
##     store an input matrix (setMatrix),
##     retrieve the input matrix (getMatrix)
##     store an inverted matrix (setInverse)
##     retrieve the inverted matrix (getInverse)
makeCacheMatrix <- function(x = matrix()) {
## Clear the result inverted matrix
m <- NULL
## Store the matrix passed by the user if it is a square matrix
## If the Matrix is not square, return an error
setMatrix <- function(y) {
nrows <- nrow(y)
ncols <- ncol(y)
if (nrows == ncols) {
x <<- y
m <<- NULL
}
else {
stop("Matrix is not Square")
}
}
## Allow the user to Retrive the matrix they passed into the function
getMatrix <- function() {
x
}
## Assign the inverted matrix into the variable
## Note, this function is not called by the user; it is called by cacheSolve
setInverse <- function(inverse) {
m <<- inverse
}
## Allow the user to retrieve the Inverted Matrix
getInverse <- function() {
m
}
## The following returns the list of functions available to the user.
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## The cacheSolve function returns an inverted matrix based on a matrix input by the user.
## When the inverted matrix is first calculated, it is stored in "cache".  If the procedure
## is called and a "cache" exists, the calculation is not performed and the "cached"
## matrix is returned.
cacheSolve <- function(x, ...) {
#If no input matrix exists, stop execution
userMatrix <- x$getMatrix()
if(is.null(userMatrix)) {
stop("Input Matrix is empty")
}
#Retrieve the value of the Inverted Matrix
#If the matrix is null then the inverted matrix has not been computed
#If it is not null the inverted matrix has been computed and should be
#returned without recomputing
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached data")
return(m)
}
#This code is executed when the inverted matrix has not been computed
#Compute the inverted matrix with the solve function
data <- x$getMatrix()
m <- solve(data)
x$setInverse(m)
message("Creating Cache")
m
}
mcm5 <- makeCacheMatrix(mat3)
mcm5$getMatrix()
cacheSolve(mcm)
cachSolve(mcm5)
cacheSolve(mcm5)
cacheSolve(mcm5)
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?qpois
setwd("//USCDC1/801163179$/My Documents")
drg <- read.csv("LOS by DRG.csv")
drg
summary(drg)
?split
drg <- read.csv("LOS by DRG.csv")
drg
summary(drg)
drg2 <- split(drg, drg$DayofweekDescription)
drg$DayofweekDescription
drg$DayofWeekDescription
drg$DayofWeekDescription[1]
drg
cols(drg)
ncol(drg)
drg(,8)
drg[,8]
drg2 <- split(drg, drg[,8])
drg2
summary(drg2)
summary(drg2[1])
summary(drg2[1,8])
Friday <- drg2[1]
Friday
summary(Friday)
Friday[,8]
class(Friday)
str(Friday)
summary(Friday[,6])
FridayDF <- as.dataframe(Friday)
summary(Friday[6])
Friday[,6]
FridayDF <- data.frame(drg2[[1]])
FridayDF
summary(FridayDF)
FridayDRG <- spit(FridayDF, FridayDF[,10])
FridayDRG <- split(FridayDF, FridayDF[,10])
class(FridayDRG)
str(FridayDRG)
FridayDRGBronch <- data.frame(FridayDRG[[1]])
FridayDRGBronch
summary(FrdayDRGBronch)
summary(FridayDRGBronch)
split(drg, list(drg$DayofWeekDescription, drg$drgdescription))
drg[[,drg$DayofWeekDesription]]
DRGSplitList <- splt(drg, list(drg$DayOfWeekDescription, drg$drgdescription))
DRGSplitList <- split(drg, list(drg$DayOfWeekDescription, drg$drgdescription))
class(DRGSplitList)
str(DRGSplitList)
names(DRGSplitList)
x <- DRGSplitList$Wednesday.TRANSIENT ISCHEMIA
x <- DRGSplitList["Wednesday.TRANSIENT ISCHEMIA"]
x
class x
class(x)
x <- data.frame(DRGSplitList["Wednesday.TRANSIENT ISCHEMIA"])
x
summary(x)
median(x$losdays)
median(x[,losdays])
median(x[,"losdays"])
x[,"losdays"]
x[, x$losdays]
x[,6]
median(x[,6])
DrgByDaySplitList <- split(drg, list(drg$drgdescrition, drg$DayOfWeekDescription))
DrgByDaySplitList <- split(drg, list(drg$drgdescription, drg$DayOfWeekDescription))
DrgByDayListCols <- names(DrgByDaySplitList)
DrgByDayListCols
length(DrgByDayListCols)
DrgByDayComboCnt <- length(DrgByDayListCols)
for i in 1:DrgByDayComboCnt {
x <- data.frame(DrgByDaySplitList[drgByDayListCols[i]])
print median(x[,6])
}
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[drgByDayListCols[i]])
print median(x[,6])
}
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[drgByDayListCols[i]])
median(x[,6])
}
DrgByDayListCol[1]
DrgByDayListCols <- names(DrgByDaySplitList)
DrgByDayComboCnt <- length(DrgByDayListCols)
DrgByDayListCols[1]
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[drgByDayListCols[i]])
median(x[,6])
}
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
median(x[,6])
}
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
print(median(x[,6]))
}
?print
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
print(c(DrgByDayListCols[i],median(x[,6])))
}
lengt(hDrgByDaySplitList)
length(DrgByDaySplitList)
?lapply
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]]
result[i,2] <- median(x[,6])
}
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
result
result <- data.frame(ncol=1, nrow=DrgByDayComboCnt)
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
result
result <- data.frame(DrgDescription=character(), Median=numeric())
result
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
result
class(rgByDayListCols[1])
class(DrgByDayListCols[1])
DrgByDayListCols[1]
result <- data.frame(DrgDescription=character(), Median=numeric())
result
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
warnings()
result <- data.frame(DrgDescription=character(), Median=numeric(), stringsAsFactors=FALSE)
result
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
result
drg <- read.csv("LOS by DRG.csv", HEAD=TRUE)
drg <- read.csv("LOS by DRG.csv", Header=TRUE)
?read.csv
drg <- read.csv("LOS by DRG.csv", header=TRUE)
DrgByDaySplitList <- split(drg, list(drg$drgdescription, drg$DayOfWeekDescription))
DrgByDayListCols <- names(DrgByDaySplitList)
DrgByDayComboCnt <- length(DrgByDayListCols)
result <- data.frame(DrgDescription=character(), Median=numeric(), stringsAsFactors=FALSE)
for (i in 1:DrgByDayComboCnt) {
x <- data.frame(DrgByDaySplitList[DrgByDayListCols[i]])
result[i,1] <- DrgByDayListCols[i]
result[i,2] <- median(x[,6])
}
result
package("httr")
load.package("httr")
?library
install.packages("httr")
library(httr)
?oauth.endpoints
oauth_endpoints("github")
myapp <- oauth_app("github", "49cfd35832308cb26c66")
myapp <- oauth_app("github", "2aee1d243c039492f002a8f35f3ddf037036bf3e")
myapp <- oauth_app("github", "49cfd35832308cb26c66")
myapp <- oauth_app("Instructor Repository", "49cfd35832308cb26c66")
fileURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
download.file(fileURL, destfile=jleekcontact.html)
fileURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
download.file(fileURL, destfile="jleekcontact.html")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
htmlcode
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
length(htmlCode[10])
htmlCode[10]
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(dataset)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind| factor(Month), data=airquality)
print(p)
?splom()
?trellis.par.set()
qplot(Wind, Ozone, data=airquality, facts =.~factor(Month))
install.pakcages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, factes =.~Month)
library(movies)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies, smooth = "loess")
qplot(votes, rating, data=movies, panel=panel.loess
)
?weekdays()
setwd("F:/ReproducibleResearch/PeerAssignment1")
RawActivityData <- read.csv("activity.csv", header=TRUE)
RawActivityData2 <- RawActivityData
for (i in 1:length(NaRows)) {
IntervalSearch <- RawActivityData[NaRows[i], 3]
AvgRowNumber <- which(AverageStepsByTimePeriod$Interval == IntervalSearch)
RawActivityData2[NaRows[i], 1] <- AverageStepsByTimePeriod[AvgRowNumber, 2]
}
NaRows <- which(is.na(RawActivityData$steps))
NumberNaRows <- length(NaRows)
for (i in 1:length(NaRows)) {
IntervalSearch <- RawActivityData[NaRows[i], 3]
AvgRowNumber <- which(AverageStepsByTimePeriod$Interval == IntervalSearch)
RawActivityData2[NaRows[i], 1] <- AverageStepsByTimePeriod[AvgRowNumber, 2]
}
AverageStepsByTimePeriod <- aggregate(RawActivityData$steps, list(Interval = RawActivityData$interval), mean, na.rm = TRUE)
colnames(AverageStepsByTimePeriod)[2] <- "MeanSteps"
AverageStepsByTimePeriod$IntervalTime <- sprintf("%04d", AverageStepsByTimePeriod$Interval)
AverageStepsByTimePeriod$IntervalTime <- format(strptime(AverageStepsByTimePeriod$IntervalTime, format="%H%M"), format = "%H:%M")
AverageStepsByTimePeriod$IntervalTime <- factor(AverageStepsByTimePeriod$Intervaltime)
for (i in 1:length(NaRows)) {
IntervalSearch <- RawActivityData[NaRows[i], 3]
AvgRowNumber <- which(AverageStepsByTimePeriod$Interval == IntervalSearch)
RawActivityData2[NaRows[i], 1] <- AverageStepsByTimePeriod[AvgRowNumber, 2]
}
RawActivityData2$WeekDay <- as.POSIXct(as.string(date))
RawActivityData2$WeekDay <- as.POSIXct(as.character(date))
RawActivityData2$WeekDay <- as.POSIXct(as.character(RawActivityData2$date))
RawActivityData2$WeekDay <- weekday(as.POSIXct(as.character(RawActivityData2$date)))
RawActivityData2$WeekDay <- weekdays(as.POSIXct(as.character(RawActivityData2$date)))
RawActivityData[RawActivityData2$Weekday in c("Saturday", "Sunday"), 4] <- "Weekend"
RawActivityData[RawActivityData2$Weekday == "Saturday" |  RawActivityData2$Weekday == "Sunday"), 4] <- "Weekend"
RawActivityData[RawActivityData2$Weekday == "Saturday" |  RawActivityData2$Weekday == "Sunday", 4] <- "Weekend"
RawActivityData2[RawActivityData2$Weekday == "Saturday" |  RawActivityData2$Weekday == "Sunday", 4] <- "Weekend"
RawActivityData2[RawActivityData2$Weekday != "Weekend", 4] <- "Weekday"
RawActivityData2[RawActivityData2$Weekday == "Saturday", 4] <- "Weekend"
RawActivityData2[RawActivityData2$Weekday == "Monday", 4] <- "Weekday"
test <- RawActivityData2[RawActivityData2$Weekday == "Monday", ]
test <- RawActivityData2[RawActivityData2[, 4] == "Monday", ]
RawActivityData2[RawActivityData2[, 4] == "Monday", 4]
RawActivityData2[RawActivityData2[, 4] == "Saturday", 4] <- "Weekend'
RawActivityData2[RawActivityData2[, 4] == "Saturday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] == "Sunday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] != "Weekend", 4] <- "Weekday"
rm(test)
RawActivityData2$WeekDay <- as.factor(RawActivityData2$WeekDay)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps, list(Interval = RawActivityData$WeekDay), mean, na.rm = TRUE)
colnames(AverageStepsByWeekend)[2] <- "MeanSteps"
AverageStepsByWeekend$IntervalTime <- sprintf("%04d", AverageStepsByWeekend$Interval)
AverageStepsByWeekend$IntervalTime <- format(strptime(AverageStepsByWeekend$IntervalTime, format="%H%M"), format = "%H:%M")
AverageStepsByWeekend$IntervalTime <- factor(AverageStepsByWeekend$Intervaltime)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps, list(WeekDay = RawActivityData$WeekDay), mean, na.rm = TRUE)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps, list(WeekDay = RawActivityData2$WeekDay), mean, na.rm = TRUE)
colnames(AverageStepsByWeekend)[2] <- "MeanSteps"
AverageStepsByWeekend$IntervalTime <- sprintf("%04d", AverageStepsByWeekend$Interval)
AverageStepsByWeekend$IntervalTime <- format(strptime(AverageStepsByWeekend$IntervalTime, format="%H%M"), format = "%H:%M")
AverageStepsByWeekend$IntervalTime <- factor(AverageStepsByWeekend$Intervaltime)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(WeekDay = RawActivityData2$WeekDay, Interval = RawActivityData2$Interval),
mean, na.rm = TRUE)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2$Interval, WeekDay = RawActivityData2$WeekDay),
mean, na.rm = TRUE)
?aggregate
RawActivityData2$WeekDay <- weekdays(as.POSIXct(as.character(RawActivityData2$date)))
RawActivityData2[RawActivityData2[, 4] == "Saturday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] == "Sunday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] != "Weekend", 4] <- "Weekday"
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2$Interval,
WeekDay = RawActivityData2$WeekDay),
mean)
Interval = RawActivityData2$Interval
Interval = RawActivityData2[,3]
Weekday =  RawActivityData2[,4]
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2[,3],
WeekDay = RawActivityData2[,4]),
mean)
colnames(AverageStepsByWeekend)[2] <- "MeanSteps"
AverageStepsByWeekend$IntervalTime <- sprintf("%04d", AverageStepsByWeekend$Interval)
AverageStepsByWeekend$IntervalTime <- format(strptime(AverageStepsByWeekend$IntervalTime, format="%H%M"), format = "%H:%M")
AverageStepsByWeekend$IntervalTime <- factor(AverageStepsByWeekend$Intervaltime)
RawActivityData2$WeekDay <- weekdays(as.POSIXct(as.character(RawActivityData2$date)))
RawActivityData2[RawActivityData2[, 4] == "Saturday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] == "Sunday", 4] <- "Weekend"
RawActivityData2[RawActivityData2[, 4] != "Weekend", 4] <- "Weekday"
RawActivityData2$WeekDay <- as.factor(RawActivityData2$WeekDay)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2[,3],
WeekDay = RawActivityData2[,4]),
mean)
colnames(AverageStepsByWeekend)[2] <- "MeanSteps"
AverageStepsByWeekend$IntervalTime <- sprintf("%04d", AverageStepsByWeekend$Interval)
AverageStepsByWeekend$IntervalTime <- format(strptime(AverageStepsByWeekend$IntervalTime, format="%H%M"), format = "%H:%M")
AverageStepsByWeekend$IntervalTime <- factor(AverageStepsByWeekend$Intervaltime)
RawActivityData2$IntervalTime <- sprintf("%04d", RawActivityData2$Interval)
RawActivityData2$IntervalTime <- format(strptime(RawActivityData2$IntervalTime, format="%H%M"), format = "%H:%M")
RawActivityData2$IntervalTime <- factor(RawActivityData2$Intervaltime)
RawActivityData2$IntervalTime <- sprintf("%04d", RawActivityData2$interval)
RawActivityData2$IntervalTime <- format(strptime(RawActivityData2$IntervalTime, format="%H%M"), format = "%H:%M")
RawActivityData2$IntervalTime <- factor(RawActivityData2$Intervaltime)
RawActivityData2$IntervalTime <- factor(RawActivityData2$IntervalTime)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2[,3],
WeekDay = RawActivityData2[,4]),
mean)
colnames(AverageStepsByWeekend)[2] <- "MeanSteps"
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2[,5],
WeekDay = RawActivityData2[,4]),
mean)
colnames(AverageStepsByWeekend)[3] <- "MeanSteps"
library(ggplot2)
g <- ggplot(AverageStepsByWeekend, aes(Interval, MeanSteps))
g
g + geom_point
g + geom_point ()
g + geom_point () + facet_grid(. ~ WeekDay)
g + geom_line () + facet_grid(. ~ WeekDay)
g + geom_point () + facet_grid(. ~ WeekDay)
g <- ggplot(AverageStepsByWeekend, aes(x=Interval, y=MeanSteps, group=WeekDay))
g + geom_line () + facet_grid(. ~ WeekDay)
g <- ggplot(AverageStepsByWeekend, aes(x=Interval, y=MeanSteps, group=WeekDay))
g + geom_line () + facet_grid(WeekDay ~ .)
g <- qplot(AverageStepsByWeekend, aes(x=Interval, y=MeanSteps, group=WeekDay))
g + geom_line () + facet_grid(WeekDay ~ .)
g <- ggplot(AverageStepsByWeekend, aes(x=Interval, y=MeanSteps, group=WeekDay))
g + geom_line () + facet_grid(WeekDay ~ .)
AverageStepsByWeekend <- aggregate(RawActivityData2$steps,
list(Interval = RawActivityData2[,3],
WeekDay = RawActivityData2[,4]),
mean)
colnames(AverageStepsByWeekend)[3] <- "MeanSteps"
g <- ggplot(AverageStepsByWeekend, aes(x=Interval, y=MeanSteps, group=WeekDay))
g + geom_line () + facet_grid(WeekDay ~ .)
g + geom_line (color = "blue") + facet_grid(WeekDay ~ .)
suppresswarnings(library(ggplot2))
